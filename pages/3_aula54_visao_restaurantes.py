# Libraries
import pandas as pd
from haversine import haversine, Unit
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from datetime import datetime
from PIL import Image # PIL: biblioteca boa para manipular imagens.
import folium
from streamlit_folium import folium_static
import numpy as np
st.set_page_config(page_title='Vis√£o Restaurantes', page_icon='üçΩÔ∏è', layout='wide')

# --------------
# Fun√ß√µes
# --------------

def clean_code(df1):
    """ Essa fun√ß√£o tem a responsabilidade de limpar o dataframe.
    
    Tipos de limpeza:
    1. Remo√ß√£o dos dados NaN
    2. Mudan√ßas dos tipos de dados de colunas
    3. Remo√ß√£o dos espa√ßos das vari√°veis de texto
    4. Formata√ß√£o da coluna de datas
    5. Limpeza da coluna de tempo - (remo√ß√£o do texto da vari√°vel num√©rica).

    Input: Dataframe
    Output: Dataframe
    """

    #1. Convertendo a coluna Age de texto para n√∫mero:
    linhas_selecionadas = (df1['Delivery_person_Age'] != 'NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    df1['Delivery_person_Age'] = df1['Delivery_person_Age'].astype(int)
    
    #2. Tirando o 'NaN ' de Road_traffic_density:
    linhas_selecionadas = (df1['Road_traffic_density'] != 'NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    #3. Tirando o 'NaN ' de City:
    linhas_selecionadas = (df1['City'] != 'NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    #4. Convertendo a coluna Ratings de texto para n√∫mero decimal (float):
    df1['Delivery_person_Ratings'] = df1['Delivery_person_Ratings'].astype(float)
    
    #5. Convertendo a coluna Order_Date de texto para data:
    df1['Order_Date'] = pd.to_datetime(df1['Order_Date'], format='%d-%m-%Y')
    
    #6. Convertendo multiple_deliveries de texto para n√∫mero inteiro (int):
    linhas_selecionadas = (df1['multiple_deliveries'] != 'NaN ')
    df1 = df1.loc[linhas_selecionadas, :].copy()
    df1['multiple_deliveries'] = df1['multiple_deliveries'].astype(int)
    
    #7. Removendo os espa√ßos de strings/texto/object - 2¬∫ jeito:
    df1.loc[:, 'ID'] = df1.loc[:, 'ID'].str.strip()
    df1.loc[:, 'Road_traffic_density'] = df1.loc[:, 'Road_traffic_density'].str.strip()
    df1.loc[:, 'Type_of_order'] = df1.loc[:, 'Type_of_order'].str.strip()
    df1.loc[:, 'Type_of_vehicle'] = df1.loc[:, 'Type_of_vehicle'].str.strip()
    df1.loc[:, 'City'] = df1.loc[:, 'City'].str.strip()
    df1.loc[:, 'Festival'] = df1.loc[:, 'Festival'].str.strip()
    
    #8. Limpando a coluna time_taken
    df1['Time_taken(min)'] = df1['Time_taken(min)'].apply(lambda x: x.split('(min)')[1])
    df1['Time_taken(min)'] = df1['Time_taken(min)'].astype(int)
    
    #9. Criando a coluna week_of_year
    df1['week_of_year'] = df1['Order_Date'].dt.strftime( "%U" )
    df1['week_of_year'] = df1['week_of_year'].astype(int)

    return df1

def distance(df1, fig):     
    if fig == False:
        cols = ["Restaurant_latitude", "Restaurant_longitude", "Delivery_location_latitude", "Delivery_location_longitude"]
        df1['distance'] = (df1.loc[:, cols].apply(lambda x: # ATEN√á√ÉO AO PAR√äNTESES PRA FECHAR ESSE C√ìDIGO!!!
                     haversine(
                         (x['Restaurant_latitude'], x['Restaurant_longitude']),
                         (x['Delivery_location_latitude'], x['Delivery_location_longitude'])), axis=1))
        avg_distance = np.round(df1['distance'].mean(), 2) # np.round = fun√ß√£o da biblioteca numpy para reduzir n√∫meros ap√≥s a v√≠rgula.
        return avg_distance

    else:
        cols = ["Restaurant_latitude", "Restaurant_longitude", "Delivery_location_latitude", "Delivery_location_longitude"]
        df1['distance'] = (df1.loc[:, cols].apply(lambda x:
                                                 haversine(
                                                     (x['Restaurant_latitude'], x['Restaurant_longitude']),
                                                     (x['Delivery_location_latitude'], x['Delivery_location_longitude'])), axis=1))
        avg_distance = df1.loc[:, ['City', 'distance']].groupby('City').mean().reset_index()
        fig = go.Figure(data=[go.Pie(labels=avg_distance['City'], values=avg_distance['distance'], pull=[0, 0.1, 0])]) 
        return fig
        

def avg_std_time_delivery(df1, festival, op):
    """
    Esta fun√ß√£o calcula o tempo e o desvio padr√£o do tempo de entrega.
    Par√¢metros:
        Inputs: 
            - df: Dataframe com os dados necess√°rios para o c√°lculo.
            - op: Tipo de opera√ß√£o que precisa ser calculada.
                'avg_time': Calcula o tempo m√©dio.
                'std_time': Calcula o desvio padr√£o do tempo.
        Output:
            - df: Dataframe com 2 colunas e 1 linha.
    """
    df_aux = df1.loc[:, ['Time_taken(min)', 'Festival']].groupby('Festival').agg({'Time_taken(min)': ['mean', 'std']})
    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()
    df_aux = np.round(df_aux.loc[df_aux['Festival'] == festival, op], 2) 
    return df_aux

def avg_std_time_graph(df1):
    df_aux = df1.loc[:, ['Time_taken(min)', 'City']].groupby('City').agg({'Time_taken(min)': ['mean', 'std']}) 
    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()
    fig = go.Figure()
    fig.add_trace(go.Bar(name='Control', x=df_aux['City'], y=df_aux['avg_time'],
                         error_y=dict(type='data', array=df_aux['std_time']))) 
    fig.update_layout(barmode='group', width=300, height=400)
    return fig

def avg_std_time_on_traffic(df1):
    df_aux = (df1.loc[:, ['Time_taken(min)', 'City', 'Road_traffic_density']]
              .groupby(['City', 'Road_traffic_density'])
              .agg({'Time_taken(min)': ['mean', 'std']})) 
    df_aux.columns = ['avg_time', 'std_time'] 
    df_aux = df_aux.reset_index()
    fig = px.sunburst(df_aux, path=['City', 'Road_traffic_density'], values='avg_time',
    # Path: a ordem dos elementos(colunas) na lista define do c√≠rculo + interno ao + externo do sunburst.
    # Values: correponder√£o √† largura de cada elemento nos c√≠rculos.
                      color='std_time', color_continuous_scale='RdBu',
    # Color: cor de cada parte dos c√≠rculos (no caso, atribu√≠das pelo desvio padr√£o). 
    # Color_continuous_scale: gradiente de cores. No caso: red e blue.
                      color_continuous_midpoint=np.average(df_aux['std_time']))
    # Color_continuous_midpoint: ponto a partir do qual a cor muda (de red para blue). No caso, √© a m√©dia do desvio padr√£o. 
    return fig


#---------- In√≠cio da estrutura l√≥gica do c√≥digo -----------

# -----------------
# Import Dataset
# -----------------
df = pd.read_csv('dashboards/train.csv')


# -----------------
# Limpando os dados
# -----------------
df1 = clean_code(df)

# VIS√ÉO RESTAURANTES

# =================
# Barra Lateral (Sidebar) do Streamlit
# =================
st.header('Marketplace - Vis√£o Restaurantes')

# image_path = 'img/1.png' # O caminho para puxar a imagem do meu computador tamb√©m vira uma vari√°vel.
image = Image.open('1.png') # Image √© uma fun√ß√£o da biblioteca PIL, open uma fun√ß√£o (livro) dela, que abre fotos do meu computador.
st.sidebar.image(image, width=120) 

st.sidebar.markdown('# Curry Company')
st.sidebar.markdown('## Fastest Delivery in Town')
st.sidebar.markdown("""---""")
st.sidebar.markdown('## Selecione uma data limite')
date_slider = st.sidebar.slider(
    'At√© qual valor?',
    value=datetime(2022, 4, 13),
    min_value=datetime(2022, 2, 11),
    max_value=datetime(2022, 4, 6),
    format='DD-MM-YYYY')
st.sidebar.markdown("""---""")
traffic_options = st.sidebar.multiselect(
    'Quais as condi√ß√µes do tr√¢nsito',
    ['Low', 'Medium', 'High', 'Jam'],
    default='Low') # Default: valores que j√° aparecem automaticamente na caixa de sele√ß√£o.
st.sidebar.markdown("""---""")
weather_options = st.sidebar.multiselect(
    'Quais as condi√ß√µes clim√°ticas',
    ['conditions Cloudy', 'conditions Fog', 'conditions Sandstorms', 'conditions Stormy', 'conditions Sunny', 'conditions Windy'],
    default='conditions Sunny') # Default: valor que aparecer√° na caixa de sele√ß√£o quando o usu√°rio n√£o selecionar nada.
st.sidebar.markdown("""---""")
st.sidebar.markdown("### Powered by Comunidade DS")

# Fazendo um DRILL DOWN nos dados - ele mostra todos os gr√°ficos do Streamlit do in√≠cio at√© a data que selecionarmos na barra do sidebar (date_slider).
# A t√©cnica do drill down consiste em dissecar um problema, dividindo-o em partes cada vez menores, at√© identificarmos a causa.

# Filtro de data:
linhas_selecionadas = df1['Order_Date'] < date_slider # Se a pessoa coloca uma data, ele filtra do in√≠cio at√© aquela data.
df1 = df1.loc[linhas_selecionadas, :]

# Filtro de tr√¢nsito:
linhas_selecionadas = df1['Road_traffic_density'].isin(traffic_options) # Road_traffic_density est√° em >>> filtro traffic_options.
df1 = df1.loc[linhas_selecionadas, :]

# Filtro de clima:
linhas_selecionadas = df1['Weatherconditions'].isin(weather_options) # Weatherconditions est√£o em >>> filtro weather_options.
df1 = df1.loc[linhas_selecionadas, :]

# =================
# Layout da P√°gina Principal do Streamlit - OS COMENT√ÅRIOS S√ÉO MUITO IMPORTANTES PARA ORGANIZARMOS NOSSO C√ìDIGO!
# =================

tab1, tab2, tab3 = st.tabs(['Vis√£o Gerencial', '_', '_'])

with tab1:
    with st.container():
        st.title('Overall Metrics')
        col1, col2, col3, col4, col5, col6 = st.columns(6)
        
        with col1:
            delivery_unique = len(df1.loc[:, 'Delivery_person_ID'].unique())
            col1.metric('Entregadores √∫nicos', delivery_unique)
            
        with col2:
            avg_distance = distance(df1, fig=False)
            col2.metric('Dist√¢ncia m√©dia das entregas', avg_distance)
            
        with col3:
            df_aux = avg_std_time_delivery(df1, 'Yes', 'avg_time')
            col3.metric('Tempo m√©dio de entrega c/ Festival', df_aux)
            
        with col4:
            df_aux = avg_std_time_delivery(df1, 'Yes', 'std_time')
            col4.metric('Desvio padr√£o de entrega c/ Festival', df_aux)
            
        with col5:
            df_aux = avg_std_time_delivery(df1, 'No', 'avg_time')
            col5.metric('Tempo m√©dio de entrega s/ Festival', df_aux)
            
        with col6:
            df_aux = avg_std_time_delivery(df1, 'No', 'std_time')
            col6.metric('Desvio padr√£o de entrega s/ Festival', df_aux)
            
    with st.container():
        st.markdown("""---""")
        col1, col2 = st.columns(2)

        with col1:
            st.markdown('##### M√©dia e desvio padr√£o do tempo de entrega por cidade (em mins)')
            fig = avg_std_time_graph(df1)
            st.plotly_chart(fig)        

        with col2:
            st.markdown('##### M√©dia e desvio padr√£o do tempo de entrega por cidade e tipo de pedido (em mins)')
            df_aux = df1.loc[:, ['Time_taken(min)', 'City', 'Type_of_order']].groupby(['City', 'Type_of_order']).agg({'Time_taken(min)': ['mean', 'std']}) 
            df_aux.columns = ['avg_time', 'std_time'] 
            df_aux = df_aux.reset_index()
            st.dataframe(df_aux)
            
    with st.container():
        st.markdown("""---""")
        st.title('Distribui√ß√£o da dist√¢ncia e do tempo das entregas com desvio padr√£o (em mins)')
        col1, col2 = st.columns(2)
        
        with col1:              
            fig = distance(df1, fig=True)
            st.plotly_chart(fig, use_container_width=True)
       
        with col2:
            fig = avg_std_time_on_traffic(df1)
            st.plotly_chart(fig, use_container_width=True)                              
            

     


































